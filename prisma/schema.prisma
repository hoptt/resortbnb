// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  refresh_token_expires_in Int?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User{
  id String @id @default(uuid())
  email String? @unique
  name String?
  image String?
  desc String?
  emailVerified Boolean?
  phone String?
  address String?
  rooms Room[]
  account Account[]
  sessions Session[]
  likes Like[]
  comments Comment[]
  bookings Booking[]
}

model Room{
  id Int @id @default(autoincrement())
  title String
  images String[]
  imageKeys String[]
  base_address String
  detailed_address String?
  lat String
  lng String
  category String
  desc String
  price Int
  bedroomDesc String?
  freeCancel Boolean @default(false)
  selfCheckIn Boolean @default(false)
  officeSpace Boolean @default(false)
  hasMountainView Boolean @default(false)
  hasShampoo Boolean @default(false)
  hasFreeLaundry Boolean @default(false)
  hasAirConditioner Boolean @default(false)
  hasWifi Boolean @default(false)
  hasBarbeque Boolean @default(false)
  hasFreeParking Boolean @default(false)
  sale Int?
  guestPreferences Boolean @default(false)
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  userId String
  eventId Int?
  use String @default("Y")
  likes Like[]
  comments Comment[]
  bookings Booking[]
  events Events? @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Events{
  id Int @id @default(autoincrement())
  title String
  term String
  type String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  bookings Booking[]
  rooms Room[]
}

model Faq{
  id Int @id @default(autoincrement())
  title String
  desc String
}

model Booking{
  id String @id @default(uuid())
  checkIn DateTime
  checkOut DateTime
  guestCount Int
  totalDays Int
  totalAmount Int
  dayPrice Int @default(0)
  discounted Int?
  roomId Int
  eventId Int?
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  status BookingStatus
  events Events? @relation(fields: [eventId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])
  payments Payment[]
}

enum BookingStatus {
  SUCCESS
  CANCEL
  PENDING
  FAILED
}

model Comment{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  body String
  roomId Int
  userId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId String
  roomId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Payment {
  id String @id @default(uuid())
  bookingId String
  amount Int
  type PaymentType?
  orderId String @unique
  orderName String?
  mId String?
  method String?
  status PaymentStatus
  requestedAt String?
  approvedAt String?
  cardNumber String?
  cardType String?
  receiptUrl String?
  checkoutUrl String?
  failureCode String?
  failureMessage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  paymentKey String?
  booking Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentType {
  NORMAL
  BILLING
  BRANDPAY
}

enum PaymentStatus {
  READY
  IN_PROGRESS
  WAITING_FOR_DEPOSIT
  DONE
  CANCELED
  PARTIAL_CANCELED
  ABORTED
  EXPIRED
}
